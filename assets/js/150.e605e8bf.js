(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{432:function(t,e,n){"use strict";n.r(e);var a=n(14),s=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"other"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[t._v("#")]),t._v(" Other")]),t._v(" "),e("h2",{attrs:{id:"regular-expression"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regular-expression"}},[t._v("#")]),t._v(" Regular Expression")]),t._v(" "),e("p",[e("code",[t._v("/rohan/")]),t._v("\nG mean global multiple match\n"),e("code",[t._v("^ -> start with,")]),t._v(" "),e("code",[t._v("$ -> end with")]),t._v(" "),e("code",[t._v("[a-zA-Z0-9] -> range, {range}")]),t._v(" "),e("code",[t._v("[^] -> negation")]),t._v(" "),e("code",[t._v("+ , . , * , ? , | , (a|b)")]),t._v(" "),e("code",[t._v("\\d -> any digit char ([0-9]) , \\D -> not")]),t._v(" "),e("code",[t._v("\\w -> any word character (a-zA-Z0-9, underscore) , \\W -> not")]),t._v(" "),e("code",[t._v("\\s -> spaces, tabs, \\S -> not")]),t._v(" "),e("code",[t._v("\\t -> tab only")])]),t._v(" "),e("p",[e("code",[t._v("[rm]ohan == rm mean r or(ya) m ->")]),t._v(" if you found r it matched or if you found m it matched\nex rohan matched, mohan matched both case match\nin hindi yah to r ho ya m ho")]),t._v(" "),e("p",[e("code",[t._v("[^rm]ohan == mean")]),t._v(" r or m ko chhod kar sab match kar lega but rm ko match nhi karega\ntip range only one character will match in range\n"),e("code",[t._v("[a-d]ohan == abcd tak match")]),t._v(" karega yah hum range define karte hai\n"),e("code",[t._v("[a-dA-Z]ohan == atoz AtoZ yah")]),t._v(" range ke andar capital latter match karta hai tak match karega yah hum range define karte hai")]),t._v(" "),e("p",[e("code",[t._v("[0-9][0-9][0-9][0-9][0-9]")]),t._v(" any five number match 32423 same example phone number match\nsolution of this repeating problem\n"),e("code",[t._v("[0-9]{5}")]),t._v("you can define range now work it will match any five character\n"),e("code",[t._v("[0-9]{10}")]),t._v("this will match 10 chacter of number mean phone number match\n"),e("code",[t._v("[0-9]{4,6}")]),t._v("this mean 4 character se leke 6 character match karega 3434 343223 23434 all match\n"),e("code",[t._v("[0-9]{5,}")]),t._v(" mean minimum 5 uske bad kitne bhi likho\n"),e("code",[t._v("[0-4]+ mean of + match character")]),t._v(" of range in multiple\nc+d mean ccccd c ek bar hona hi chahiye or c multi time bhi ho skta hai\n"),e("code",[t._v("c*d mean cd d ccd mean c ho")]),t._v(" ya no koi frak nhi pdta or c multiple bhi to bhi koi frak nhi padta\n"),e("code",[t._v(".abc mean . ex %abc 6abc ki")]),t._v(" jagah kuch bhi ho skta hai any key bas new line chhod ke\n"),e("code",[t._v(".+ mean . kuch bhi + mean ek")]),t._v(" se jyda bar unlimited\nabc?d mean question mark se pahle koi bhi character ho vo optional hai ex abd abcd\n"),e("code",[t._v("a[a-z]?b adb ab")]),t._v(" "),e("code",[t._v("(r|m)ohan mean any one match")]),t._v(" rohan or mohan will match\n"),e("code",[t._v("(r|nisha)ohan nishaohan")]),t._v(" like this example")]),t._v(" "),e("p",[e("code",[t._v("[0-9] shorthand \\d \\D digit chhod")]),t._v(" ke sab match kerega\n"),e("code",[t._v("[a-zA-Z0-9_] shorthand \\w \\D shorthand")]),t._v(" chhod ke sab match karega\n"),e("code",[t._v("[\\r\\n\\t\\f\\v ] shortand \\s space")]),t._v(" match karega   \\S space chhod ke sab match karega\n"),e("code",[t._v("\\t tab match karega")]),t._v(" "),e("code",[t._v("^rohan mean rohan start")]),t._v(" me match hona chahiye\n"),e("code",[t._v("rohan$ mean rohan end me")]),t._v(" match hona chahiye\n"),e("code",[t._v("^rohan$ mean rohan se hi")]),t._v(" start ho end bhi rohan se ho\n"),e("code",[t._v("\\. mean . match slash")]),t._v(" remove dot power escape kar deta")]),t._v(" "),e("p",[e("code",[t._v("\\. dot match")]),t._v("\nwww.google.com www.gooogle.com  www.google.com\n"),e("code",[t._v("\\\\ match \\")])]),t._v(" "),e("p",[e("code",[t._v(".\t\t- Any Character Except New Line")]),t._v(" "),e("code",[t._v("\\d \t\t- Digit (0-9)")]),t._v(" "),e("code",[t._v("\\D \t\t- Not a Digit (0-9)")]),t._v(" "),e("code",[t._v("\\w \t\t- Word Character (a-z, A-Z, 0-9, _)")]),t._v(" "),e("code",[t._v("\\W \t\t- Not a Word Character")]),t._v(" "),e("code",[t._v("\\s \t\t- Whitespace (space, tab, newline)")]),t._v(" "),e("code",[t._v("\\S \t\t- Not Whitespace (space, tab, newline)")])]),t._v(" "),e("p",[e("code",[t._v("\\b \t\t- Word Boundary")]),t._v(" "),e("code",[t._v("\\B \t\t- Not a Word Boundary")]),t._v(" "),e("code",[t._v("^ \t\t- Beginning of a String")]),t._v(" "),e("code",[t._v("$ \t\t- End of a String")])]),t._v(" "),e("p",[e("code",[t._v("[] \t\t- Matches characters in brackets")]),t._v(" "),e("code",[t._v("[^] \t- Matches Characters not in brackets")]),t._v(" "),e("code",[t._v("| \t\t- Either Or")])]),t._v(" "),e("p",[t._v("Quantifiers:\n"),e("code",[t._v("*\t\t- 0 or More")]),t._v(" "),e("code",[t._v("+ \t\t- 1 or More")]),t._v(" "),e("code",[t._v("? \t\t- 0 or One")]),t._v(" "),e("code",[t._v("{3}\t\t- Exact Number")]),t._v(" "),e("code",[t._v("{3,4}\t- Rnage of Numbers")]),t._v(" (Minimum, Maximum)")]),t._v(" "),e("p",[e("code",[t._v("\\d\\d\\d.\\d\\d\\d.\\d\\d\\d\\d")]),t._v(" 321-555-4321 321.555.4321 mean . any character\n"),e("code",[t._v("\\d\\d\\d[-.]\\d\\d\\d[-.]\\d\\d\\d\\d")]),t._v(" 321-555-4321 321.555.4321 mean match - or . both work only first match after look send character")]),t._v(" "),e("p",[e("code",[t._v("\\d{3}.\\d{3}.\\d{4}")]),t._v(" same first 3 digit first 3 digit last 4 digit")]),t._v(" "),e("p",[e("code",[t._v("[89]00[-.]\\d\\d\\d[-.]\\d\\d\\d\\d")]),t._v("   800-555-4321 900-555-4321 mean match 800 ya 900 in beginning")]),t._v(" "),e("p",[e("code",[t._v("[^a-z]")]),t._v(" not match in lower case a to z")]),t._v(" "),e("p",[t._v("cat mat pat bat we want don't match bat so [^b]at mean not b chhod ke sab match kro")]),t._v(" "),e("p",[e("code",[t._v("Mr\\.? mean \\. escape dot ? mean . is option")]),t._v(" Mr. Rohan Mr Dhiman\n"),e("code",[t._v("Mr\\.?\\s[A-Z] mean \\s space match A-Z mean match")]),t._v(" First Capital later\n"),e("code",[t._v("M(r|s|rs)\\.?\\s[A-Z]\\w* r|s|rs mean")]),t._v(" or  Mr. Rohan Mr Mohan ms Nisha Mrs. Dhiman Mr. T")]),t._v(" "),e("p",[t._v("RohanDhiman@gmail.com\n"),e("code",[t._v("[a-zA-Z]+@[a-zA-Z]+\\.com")])]),t._v(" "),e("p",[t._v("rohan.dhiman@universty.edu\n"),e("code",[t._v("[a-zA-Z.]+@[a-zA-Z]+\\.(com|edu)")])]),t._v(" "),e("p",[t._v("rohan-dhiman123@gmail.com\n"),e("code",[t._v("[a-zA-Z0-9.-]+@[a-zA-Z-]+\\.(com|edu|net)")])]),t._v(" "),e("p",[t._v("https://www.google.com\nhttp://haackerdais.com\nhttps://youtube.com\nhttps://www.nasa.gov")]),t._v(" "),e("p",[e("code",[t._v("https?://(www\\.)?\\w+\\.\\w+")])]),t._v(" "),e("p",[e("code",[t._v("[abc123]000 mean abc123")]),t._v(" se koi bhi first character ho uske bad 000 hone chahiye a000 b000")]),t._v(" "),e("p",[e("code",[t._v("[^c]000 mean")]),t._v(" first latter c chhod ke 000 ke sath jo match ho kar do a000 b000 work")]),t._v(" "),e("p",[e("code",[t._v("[0-9]+ mean unlimited time")]),t._v(" 234234324324234 match will not match range 10 character so")]),t._v(" "),e("p",[e("code",[t._v("[0-9]{10}")]),t._v(" mean first character 10 time match")]),t._v(" "),e("p",[e("code",[t._v("[a-z]{5}")]),t._v(" match five character first of a-z\n"),e("code",[t._v("[a-z]{5,8}")]),t._v(" match five or eight character")]),t._v(" "),e("p",[e("code",[t._v("[a-z]{5,}")]),t._v(" mean minimum should 5 character maximum infinite times\n"),e("code",[t._v("^[a-z]{5}$")]),t._v(" mena only match 5 character if u write more don't match rohandhiman not match rohan match suman match")]),t._v(" "),e("p",[e("code",[t._v("[a-z]{5}$")]),t._v(" lskdjflkdsrohan last ke five character match")]),t._v(" "),e("p",[t._v("bitfumess\n"),e("code",[t._v(". mean you need to find match")]),t._v(" each and everything except at any line break;\n"),e("code",[t._v(". sab kuch select kro")]),t._v(" bas line break ko chhod ke\n"),e("code",[t._v(". only select invisiblely")]),t._v(" mean ek ke character ko select krega na ko latter ko or line ko")]),t._v(" "),e("p",[e("code",[t._v(".+ mean select all not single or invisiable character")]),t._v(" thats whole line select\n"),e("code",[t._v("+ mean match one or more")]),t._v(" ek to select kar or ek se bhi jyda kar skta hai")]),t._v(" "),e("p",[e("code",[t._v(". Matches any character except linebreaks.")]),t._v(" Equivalent to [^\\n\\r].")]),t._v(" "),e("p",[e("code",[t._v(". dot have a speacial meaning")]),t._v(" if you want to escape use . like this now it will select only dot")]),t._v(" "),e("p",[e("code",[t._v("\\d meaning Matches any digit character (0-9).")]),t._v(" Equivalent to [0-9].\n"),e("code",[t._v("\\d+ meaning select all digit mean one or more")]),t._v(" 342-2340-34342 these group selected")]),t._v(" "),e("p",[e("code",[t._v("w select double you")]),t._v(" "),e("code",[t._v("w+ select group of double you")])]),t._v(" "),e("p",[e("code",[t._v("\\w meaning Matches any word character")]),t._v(" (alphanumeric & underscore). Only matches low-ascii characters (no accented or non-roman characters). Equivalent to [A-Za-z0-9_]\n"),e("code",[t._v("\\w+ meaning select group of words")])]),t._v(" "),e("p",[e("code",[t._v("\\s meaning Matches any whitespace character")]),t._v(" (spaces, tabs, line breaks).\n"),e("code",[t._v("\\d+\\s mean select \\d any number, + select one or more")]),t._v(" mean group, \\s mean select space")]),t._v(" "),e("p",[e("code",[t._v("g mean select everywhere")]),t._v(" "),e("code",[t._v("\\S mean select everythign")]),t._v(" except space\nMatches any character that is not a whitespace character (spaces, tabs, line breaks).")]),t._v(" "),e("p",[e("code",[t._v("\\W Matches any character")]),t._v(" that is not a word character (alphanumeric & underscore). Equivalent to [^A-Za-z0-9_]")]),t._v(" "),e("p",[e("code",[t._v("(a|b) Either or ale ble")]),t._v(" "),e("code",[t._v("| meaning Acts like a boolean OR.")]),t._v(" Matches the expression before or after the |.\nIt can operate within a group, or on a whole expression. The patterns will be tested in order.")]),t._v(" "),e("p",[e("code",[t._v("[select range] atoz abcd")]),t._v(" "),e("code",[t._v("[a-z]oal")]),t._v("\ngoal\ncoal")]),t._v(" "),e("p",[e("code",[t._v("[a-z]oal\\d+ meaning")]),t._v(" select oal after that select any digit with one or more digit\naoal345345435454354")]),t._v(" "),e("p",[e("code",[t._v("[a-z]oal[3-7]+ meaning")]),t._v(" goal345")]),t._v(" "),e("p",[e("code",[t._v("+ mean one or more")]),t._v(" "),e("code",[t._v("* mean zero or more")]),t._v(" zero mean optional")]),t._v(" "),e("p",[e("code",[t._v("(a|b)le[0-9]* select all number is optional")]),t._v(" optional mean zero could be\ncoal345\ngoal454\ntoal\naoal")]),t._v(" "),e("p",[e("code",[t._v("+ select everything after")]),t._v(" that we can set range we have to use {4} use it instead of + {2,4} minimum select 2 maximum 4")]),t._v(" "),e("p",[e("code",[t._v("\\.in* mean .in is optional")]),t._v(" select but will not work we have to use first way (.in)* or second way (.in){0,2} third way (.in)? same optional")]),t._v(" "),e("p",[t._v("Character classes\n"),e("code",[t._v(".\t\t\tany character except newline")]),t._v(" "),e("code",[t._v("\\w\\d\\s\t\tword, digit, whitespace")]),t._v(" "),e("code",[t._v("\\W\\D\\S\t\tnot word, digit, whitespace")]),t._v(" "),e("code",[t._v("[abc]\t\tany of a, b, or c")]),t._v(" "),e("code",[t._v("[^abc]\t\tnot a, b, or c")]),t._v(" "),e("code",[t._v("[a-g]\t\tcharacter between a & g")])]),t._v(" "),e("p",[t._v("Anchors\n"),e("code",[t._v("^abc$\t\tstart / end of the string")]),t._v(" "),e("code",[t._v("\\b\\B\t\tword, not-word boundary")])]),t._v(" "),e("p",[t._v("Escaped characters\n"),e("code",[t._v("\\.\\*\\\\\t\tescaped special characters")]),t._v(" "),e("code",[t._v("\\t\\n\\r\t\ttab, linefeed, carriage return")])]),t._v(" "),e("p",[t._v("Groups & Lookaround\n"),e("code",[t._v("(abc)\t\tcapture group")]),t._v(" "),e("code",[t._v("\\1\t\t\tbackreference to group #1")]),t._v(" "),e("code",[t._v("(?:abc)\t\tnon-capturing group")]),t._v(" "),e("code",[t._v("(?=abc)\t\tpositive lookahead")]),t._v(" "),e("code",[t._v("(?!abc)\t\tnegative lookahead")])]),t._v(" "),e("p",[t._v("Quantifiers & Alternation\n"),e("code",[t._v("a*a+a?\t\t0 or more, 1 or more, 0 or 1")]),t._v(" "),e("code",[t._v("a{5}a{2,}\texactly five, two or more")]),t._v(" "),e("code",[t._v("a{1,3}\t\tbetween one & three")]),t._v(" "),e("code",[t._v("a+?a{2,}?\tmatch as few as possible")]),t._v(" "),e("code",[t._v("ab|cd\t\tmatch ab or cd")])]),t._v(" "),e("p",[e("code",[t._v("((\\d{4})([-\\s]))\\2 break mean")]),t._v(" group we have 3 group here first break first group\nsecond braket second group third braket mean third group which group you want to print use reference like \\1 first group \\2 second group \\3 third group")]),t._v(" "),e("h2",{attrs:{id:"bash-besic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bash-besic"}},[t._v("#")]),t._v(" Bash Besic")]),t._v(" "),e("p",[t._v("cat /etc/shells => all shells files here")]),t._v(" "),e("p",[t._v("which bash  => get location of bash")]),t._v(" "),e("p",[t._v("hello.sh => important note here .sh extension here")]),t._v(" "),e("p",[t._v("execute file one method")]),t._v(" "),e("p",[t._v("bash index.sh => execute file")]),t._v(" "),e("p",[t._v("execute file second method")]),t._v(" "),e("p",[t._v("first change permmission")]),t._v(" "),e("p",[t._v("chmod +x hello.sh")]),t._v(" "),e("p",[t._v("now execute")]),t._v(" "),e("p",[t._v("./hello.sh")]),t._v(" "),e("h4",{attrs:{id:"comment-inside-script"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comment-inside-script"}},[t._v("#")]),t._v(" comment inside script")]),t._v(" "),e("p",[t._v("if [ condition ]\nthen\nstatement\nfi")]),t._v(" "),e("p",[t._v("fi mean endif\nthen mean if true")]),t._v(" "),e("p",[t._v("=  compare if two strings are equal")]),t._v(" "),e("p",[t._v("!=  compare if two strings are not equal")]),t._v(" "),e("p",[t._v("-n  evaluate if string length is greater than zero")]),t._v(" "),e("p",[t._v("-z  evaluate if string length is equal to zero")]),t._v(" "),e("p",[t._v("Examples:")]),t._v(" "),e("p",[t._v("[ s1 = s2 ]  (true if s1 same as s2, else false)")]),t._v(" "),e("p",[t._v("[ s1 != s2 ]  (true if s1 not same as s2, else false)")]),t._v(" "),e("p",[t._v("[ s1 ]   (true if s1 is not empty, else false)")]),t._v(" "),e("p",[t._v("[ -n s1 ]   (true if s1 has a length greater then 0, else false)")]),t._v(" "),e("p",[t._v("[ -z s2 ]   (true if s2 has a length of 0, otherwise false)")]),t._v(" "),e("p",[t._v("Number Comparisons")]),t._v(" "),e("p",[t._v("-eq compare if two numbers are equal")]),t._v(" "),e("p",[t._v("-ge compare if one number is greater than or equal to a number")]),t._v(" "),e("p",[t._v("-le  compare if one number is less than or equal to a number")]),t._v(" "),e("p",[t._v("-ne  compare if two numbers are not equal")]),t._v(" "),e("p",[t._v("-gt  compare if one number is greater than another number")]),t._v(" "),e("p",[t._v("-lt  compare if one number is less than another number")]),t._v(" "),e("p",[t._v("Examples:")]),t._v(" "),e("p",[t._v("[ n1 -eq n2 ]  (true if n1 same as n2, else false)")]),t._v(" "),e("p",[t._v("[ n1 -ge n2 ]  (true if n1greater then or equal to n2, else false)")]),t._v(" "),e("p",[t._v("[ n1 -le n2 ]  (true if n1 less then or equal to n2, else false)")]),t._v(" "),e("p",[t._v("[ n1 -ne n2 ]  (true if n1 is not same as n2, else false)")]),t._v(" "),e("p",[t._v("[ n1 -gt n2 ]  (true if n1 greater then n2, else false)")]),t._v(" "),e("p",[t._v("[ n1 -lt n2 ]  (true if n1 less then n2, else false)")]),t._v(" "),e("p",[t._v("................very very important .................")]),t._v(" "),e("blockquote",[e("p",[t._v("single mean override file")]),t._v(" "),e("blockquote",[e("p",[t._v("double mean append text\nexmple")])])]),t._v(" "),e("p",[t._v("cat >> filename")]),t._v(" "),e("p",[t._v(".................. change permission file .................")]),t._v(" "),e("p",[t._v("chmod -w filename mean remove write permission")]),t._v(" "),e("p",[t._v("chmod +w filename mean add write permission")]),t._v(" "),e("p",[t._v("logical and &&")]),t._v(" "),e("ul",[e("li",[t._v("for using And operator use &&")])]),t._v(" "),e("p",[t._v('if [ "$age" -gt 18] && ["$age" -lt 30 ]')]),t._v(" "),e("ul",[e("li",[t._v("The -a option provide an alternative compound condition test.")])]),t._v(" "),e("p",[t._v('if [ "$age" -gt 18 -a "$age" -lt 30 ]')]),t._v(" "),e("ul",[e("li",[t._v("if [[ $condition1 && $condition2 ]]    # Also works.")])]),t._v(" "),e("p",[t._v('if [[ "$age" -gt 18 && "$age" -lt 30 ]]')]),t._v(" "),e("p",[t._v("$(( expression ))")]),t._v(" "),e("p",[t._v('echo "Addition = $(( number_1 + number_2 ))"')]),t._v(" "),e("p",[t._v("expr — evaluate expression")]),t._v(" "),e("p",[t._v("we can also use expr command to perform Arithmetic operations on numbers.")]),t._v(" "),e("p",[t._v('echo "Addition = $(expr  $number_1 + $number_2 )"')]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#! /bin/bash")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "hello world"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bash variable print path of bash this is inbuit variable")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $BASH")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Got bash version")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $BASH_VERSION")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Home directory print")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $HOME")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# path print which location you present")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $PWD")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# our varialbes here important no space both neither name nor rohan")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("rohan\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# you can use space in print")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo this is my name $name")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# the varialbe name should not start with number")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get input value from user => read method get user input")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "Enter name: "')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read myvariablename")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "you enterd name : $name"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get input multiple names with space also inter with spaces")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "enter multiple names with space"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read firstname secondname thirdname")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "Names $firstname, $secondname, $thirdname"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# input with same line help us -p flag")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read -p 'Username : ' username")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "You enterd this username $username"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get hidden password or print hidden passsword")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read -p 'Username : ' username")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read -sp 'Password : ' password")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "your username $username"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "your password $password"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if not enter any variable name after read => it automatically call $REPLY variable")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "enter name"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo $REPLY")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get user input array same like multiple with array -a mean array")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "Enter multiple names with space"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read -a names")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo ${names[0]} ${names[1]} ${names[2]}")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pass arguments when you run file after that arguments ex ./hello.sh one args second args third args")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Zero mean filename print first agr firstnum secondarg secondnum thirdagr thirdnum")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ./index.sh first second third ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo $0 $1 $2 $3 ' > echo $0 $1  $2 $3'")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# args store in array method help us $@ this ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Array will not print file name if u write zero")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# args=("$@")')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo ${args[0]} ${args[1]} ${args[2]}")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# got same result args store in $@ inside")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# args=("$@")')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo $@")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $# print args count")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo $#")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# very important [ inside space both side ]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if [ $count -eq 10 ]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if (($count > 9))  # use it for expression")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "true condition"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fi")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if with else condition")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if (($count < 5))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "this is true condition"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# else")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "this is false condition"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fi")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if elseif and else")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if (($count < 5))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "This is true first"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# elif (($count < 4))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "this is true second"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# else")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "this is false"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fi")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# how to check file exits or not")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\c mean show text same line -e mean help \\c method execute")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo -e "Enter the name of the file : \\c"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read file_name # read input filename")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if [ -e $file_name ] # all file read")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if [ -f $file_name ] # regular file read ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#  echo "$file_name not empty"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# else ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#  echo "$file_name empty"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fi")]),t._v("\n\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# append text file here")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo -e "Enter the name of the file : \\c"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read file_name # read input filename")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if [ -f $file_name ] # regular file read ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\tif [ -w $file_name ]  # if read file permission run this command")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\tthen  \t")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t   echo "Type some text data. to quit press ctrl+d."')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\tcat >> $file_name")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\telse")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t   echo "The file don\'t have write permission"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\tfi\t")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#else ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#  echo "$file_name empty"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#fi")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# and operator using example")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# three way and operator use")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("age")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("25")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# if [ "$age" -gt 18 ] && [ "$age" -lt 30 ]')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# if [ "$age" -gt 18 -a "$age" -lt 30 ]')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# if [[ "$age" -gt 18 && "$age" -lt 30 ]]')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#  echo "valid age"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# else")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#  echo "age not valid"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fi")]),t._v("\n\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or operator")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# if [ "$age" -gt 18 ] || [ "$age" -lt 30 ]')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# if [ "$age" -gt 18 -o "$age" -lt 30 ]')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# if [[ "$age" -gt 18 || "$age" -lt 30 ]]')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# then ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "valid age"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# else")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "age not valid"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fi\t")]),t._v("\n\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# arithmetic operations two way use")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("num1")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("232")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("num2")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo $((num1 + num2))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $((num1 - num2))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $((num1 * num2))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $((num1 / num2))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $((num1 % num2))")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# second way")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $( expr $num1 + $num2 )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $( expr $num1 - $num2 )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $( expr $num1 \\* $num2 )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $( expr $num1 / $num2 )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#echo $( expr $num1 % $num2 )")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# | mean execute with bc library same last command !! sudo")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "23.3+22" | bc')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "23.3-22" | bc')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "23.3*22" | bc')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "23.3/22" | bc')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "scale=2;23.3/22" | bc  # two character after dot')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "scale=7;23.3/22" | bc  # two character after dot')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "23.3%22" | bc')]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#num3=434")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#num4=343")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "$num3+$num4" | bc')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "$num3-$num4" | bc')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "$num3/$num4" | bc')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "$num3*$num4" | bc')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "math library -l "')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "sqrt(27)" | bc -l  # squire root')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "3^3" | bc -l   # power')]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# swtich case")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get value in args bash ./index.sh car")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# vehicle=$1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#case $vehicle in ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t"car" )')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t  echo "Rent of $vehicle is 200" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t"van" )')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t  echo "Rent of $vehicle is 300" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t"bicyle" )')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t  echo "Rent of $vehicle is 50" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t"truck" )')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t  echo "Rent of $vehicle is 700" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\t* )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\techo "default vehicle" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#esac\t ")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo -e "Enter some character : \\c"   # print same line')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read value")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# case $value in")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\t[a-z] )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t   echo "User entered $value a to z" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\t[A-Z] )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t   echo "User entered $value A TO Z" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\t[0-9] )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t   echo "User entered $value 0 to 9" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\t? )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t   echo "User entered $value special character" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\t* )")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#\t   echo "Unknow input" ;;')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#esac\t")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# array support single demenstion array")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# os=('ubutu' 'mac' 'window' 'kali linux')")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "${os[@]}"  # @ print all array')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "${os[0]}"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "${!os[@]}"  # all index of array')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "${#os[@]}" # print array length')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add in array value")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#os[4]='xp' # add")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#os[2]='window 10'  #update")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "${os[@]}" # remove')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#unset os[1]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#echo "${os[@]}"')]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# loop here")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#n=1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# while [ $n -le 10 ]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#while (( $n <= 3 ))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#  echo "$n"')]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# n=$(( n+1 ))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\t(( n++ ))")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# open terminal")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gnome-terminal &")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# open three terminal")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  code &")]),t._v("\n\t\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  sleep 2 # two second stop\t")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# first way")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read any file")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#while read p")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   echo $p")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done < index.sh")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done < testingfile")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# read file by cat after that send content to while loop")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#cat testingfile | while read p")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  echo $p")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# third way to read file with space after equal")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#while IFS= read -r line")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo $line")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done < testingfile")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# until loops mean check condition is false ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for loop check only true condition both have difference")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("n")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#until [ $n -ge 10 ]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#until (( $n > 10 ))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  echo $n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  (( n++ ))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for loop example")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#for i in 2 3 4 5 6 7 8")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo $i")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#for i in {1..20}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#for i in {1..20..2}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo $i")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#for (( i=0; i<5; i++ ))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo $i")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# multiple commad run by loop one by one")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#for command in ls pwd date")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo " --------- $command --------------"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $command")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for loop wiht all print folder with * start")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#for item in *")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  if [ -d $item ]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  then ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    echo $item")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  fi")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for loop select any no with number")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#select name in mark rohan nisha sonakshi")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "$name selected"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# for loop selected any no with check case")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#select name in rohan nisha akshita gify")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  case $name in")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  rohan)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    echo rohan is selected ;;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  nisha)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    echo nisha is selected ;;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  akshita)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    echo akshita is selected ;;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  gifty)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#    echo gifty is selected ;;")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   *)")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   echo "Errror please provide the no. between 1..4"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#   esac")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#for (( i=1 ; i<=10 ; i++ ))")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#do ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  if [ $i -eq 5 ]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  then ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     #break")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     continue")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  fi")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#  echo "$i"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#done")]),t._v("\n\n\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# function using two way")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# first way using")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("Hello")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello man"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fuction using second way")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# call function here")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Hello")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#name")]),t._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# function with args same like with file name $1 first arg second $2")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello '),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v('"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# called function with arg")]),t._v("\nname Rohan\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# multiple arg")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-name function"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello '),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$3")]),t._v('"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# calling multiple function")]),t._v("\nname Rohan Nisha Akshita\n\n\n")])])]),e("p",[t._v("One Examle")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/bin/sh")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run this file => bash first")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This is program displays stuff in a directory")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# echo "Program is starting.."')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ls -la")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hotdog "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"you typed hotdog"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You did not type hotdog"')]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" it was "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\"'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[t._v("x")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" dog elephant fish catt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$x")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n\n")])])]),e("h2",{attrs:{id:"github-config-file"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-config-file"}},[t._v("#")]),t._v(" GitHub Config File")]),t._v(" "),e("p",[t._v("config")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("core"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\trepositoryformatversion "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\tfilemode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\tbare "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\tlogallrefupdates "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"origin"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\turl "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" https://kpdeveloper65:f1u8c0k%252019@github.com/sintragroup/HealthRecruitment-Bck.git\n\tfetch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" +refs/heads/*:refs/remotes/origin/*\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"master"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\tremote "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" origin\n\tmerge "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" refs/heads/master\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dev"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\tremote "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" origin\n\tmerge "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" refs/heads/dev\n")])])]),e("h2",{attrs:{id:"markdown-language"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#markdown-language"}},[t._v("#")]),t._v(" Markdown Language")]),t._v(" "),e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Headings --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#")]),t._v(" Heading 1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("##")]),t._v(" Heading 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("###")]),t._v(" Heading 3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("####")]),t._v(" Heading 4")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("#####")]),t._v(" Heading 5")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token title important"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("######")]),t._v(" Heading 6")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Italics --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")]),e("span",{pre:!0,attrs:{class:"token content"}},[t._v("This text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("*")])]),t._v(" is italic\n\n"),e("span",{pre:!0,attrs:{class:"token italic"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")]),e("span",{pre:!0,attrs:{class:"token content"}},[t._v("This text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("_")])]),t._v(" is italic\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Strong --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token bold"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("**")]),e("span",{pre:!0,attrs:{class:"token content"}},[t._v("This text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("**")])]),t._v(" is italic\n\n"),e("span",{pre:!0,attrs:{class:"token bold"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("__")]),e("span",{pre:!0,attrs:{class:"token content"}},[t._v("This text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("__")])]),t._v(" is italic\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Strikethrough --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token strike"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("~~")]),e("span",{pre:!0,attrs:{class:"token content"}},[t._v("This text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("~~")])]),t._v(" is strikethrough\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Horizontal Rule --\x3e")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token hr punctuation"}},[t._v("---")]),t._v("\n___\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Blockquote --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token blockquote punctuation"}},[t._v(">")]),t._v(" This is a quote\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Links --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token url"}},[t._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[t._v("Traversy Media")]),t._v("]("),e("span",{pre:!0,attrs:{class:"token url"}},[t._v("http://www.traversymedia.com")]),t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token url"}},[t._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[t._v("Traversy Media")]),t._v("]("),e("span",{pre:!0,attrs:{class:"token url"}},[t._v("http://www.traversymedia.com")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Traversy Media"')]),t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- UL --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("*")]),t._v(" Item 1\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("*")]),t._v(" Item 2\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("*")]),t._v(" Item 3\n  "),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("*")]),t._v(" Nested Item 1\n  "),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("*")]),t._v(" Nested Item 2\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- OL --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("1.")]),t._v(" Item 1\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("1.")]),t._v(" Item 2\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("1.")]),t._v(" Item 3\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Inline Code Block --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token code-snippet code keyword"}},[t._v("`<p>This is a paragraph</p>`")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Images --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token url"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("["),e("span",{pre:!0,attrs:{class:"token content"}},[t._v("Markdown Logo")]),t._v("]("),e("span",{pre:!0,attrs:{class:"token url"}},[t._v("https://markdown-here.com/img/icon256.png")]),t._v(")")]),t._v("\n\n")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" start\n")])])]),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" num2\n")])])]),e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Tables --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token table"}},[e("span",{pre:!0,attrs:{class:"token table-header-row"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token table-header important"}},[t._v(" Name     ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token table-header important"}},[t._v(" Email          ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n")]),e("span",{pre:!0,attrs:{class:"token table-line"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("--------")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("--------------")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n")]),e("span",{pre:!0,attrs:{class:"token table-data-rows"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token table-data"}},[t._v(" John Doe ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token table-data"}},[t._v(" john@gmail.com ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token table-data"}},[t._v(" Jane Doe ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),e("span",{pre:!0,attrs:{class:"token table-data"}},[t._v(" jane@gmail.com ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v("\n")])]),t._v("\n\n")])])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Name")]),t._v(" "),e("th",[t._v("Email")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("John Doe")]),t._v(" "),e("td",[t._v("john@gmail.com")])]),t._v(" "),e("tr",[e("td",[t._v("Jane Doe")]),t._v(" "),e("td",[t._v("jane@gmail.com")])])])]),t._v(" "),e("div",{staticClass:"language-markdown extra-class"},[e("pre",{pre:!0,attrs:{class:"language-markdown"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- Task List --\x3e")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("*")]),t._v(" [x] Task 1\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("*")]),t._v(" [x] Task 2\n"),e("span",{pre:!0,attrs:{class:"token list punctuation"}},[t._v("*")]),t._v(" [ ] Task 3\n\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);