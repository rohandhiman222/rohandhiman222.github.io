(window.webpackJsonp=window.webpackJsonp||[]).push([[186],{470:function(n,t,s){"use strict";s.r(t);var e=s(14),a=Object(e.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"enum"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enum"}},[n._v("#")]),n._v(" Enum")]),n._v(" "),t("div",{staticClass:"language-ts extra-class"},[t("pre",{pre:!0,attrs:{class:"language-ts"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/* enum Pet {\n    Dog,\n    Cat,\n    Goldfish,\n    Skeleton\n} */")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// console.log(Pet.Cat)")]),n._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// Numeric and String Enums")]),n._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/* enum Pet {\n    Dog = 2,\n    Cat,\n    Goldfish,\n    Skeleton\n} */")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('/* enum Pet {\n    Dog = 2,\n    Cat = 9,\n    Goldfish = 15,\n    Skeleton = 44\n}\n\nconsole.log(Pet.Dog)\n\n\nenum Counting {\n    One = "one",\n    Two = "two",\n    Three = "three"\n}\n */')]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// Enum Values from Functions")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// This will throw an error, since the function is at the start")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// So typescript assumes all will be functions")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/*\nEnums can also be functions which return values. If you only define one value in an enum, functions must go at the end. If you put functions at the start, then all enums will require values. As such, the following throws an error:\n\n\n\nenum Counting {\n    One = getOne(),\n    Two,\n    Three,\n}\n */")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[n._v("getThree")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// not work")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/* enum Counting {\n    One,\n    Two,\n    Three = getThree(),\n} */")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// this work fine")]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("/* \nenum Counting {\n    Three = getThree(),\n    One= 3,\n    Two\n    \n}\n\nconsole.log(Counting) */")]),n._v("\n\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("enum")]),n._v(" FirstEnum "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    One"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// Returns "0"')]),n._v("\n    Two"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// Returns "1"')]),n._v("\n    Three  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// Returns "2"')]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("enum")]),n._v(" AnotherEnum "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n    One"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" FirstEnum"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("One"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// returns FirstEnum.One, i.e. "0"')]),n._v("\n    Two"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("+")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// Calculates and returns "2"')]),n._v("\n    Three"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v("*")]),n._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// Calculates and returns "3"')]),n._v("\n    Star"),t("span",{pre:!0,attrs:{class:"token operator"}},[n._v(":")]),n._v(" One           "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v('// Refers to AnotherEnum.One, returns "0"')]),n._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);