(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{447:function(t,a,e){"use strict";e.r(a);var n=e(14),s=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-and-github"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-and-github"}},[t._v("#")]),t._v(" Git and Github")]),t._v(" "),a("h2",{attrs:{id:"settings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#settings"}},[t._v("#")]),t._v(" Settings")]),t._v(" "),a("ul",[a("li",[t._v("name")]),t._v(" "),a("li",[t._v("email")]),t._v(" "),a("li",[t._v("default editor")]),t._v(" "),a("li",[t._v("line ending")])]),t._v(" "),a("p",[a("strong",[t._v("Three type setting")])]),t._v(" "),a("ul",[a("li",[t._v("system all users")]),t._v(" "),a("li",[t._v("golobal All repositories of the current user")]),t._v(" "),a("li",[t._v("local the current repository")])]),t._v(" "),a("p",[a("strong",[t._v("Our First Git Command!")])]),t._v(" "),a("ul",[a("li",[t._v("Use "),a("code",[t._v("git init")]),t._v(" to create a new git repository. Before we can do anything git-related, we must initialize a repo first!")])]),t._v(" "),a("ul",[a("li",[t._v("This is something you do once per project. Initialize the repo in the top-level folder containing your project")])]),t._v(" "),a("ul",[a("li",[t._v("Use "),a("code",[t._v("git add file1 file2")]),t._v(" to add specific files to the staging area. Separate files with spaces to add multiple at once.")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Use "),a("code",[t._v("git add .")]),t._v(" to stage all changes at once")])]),t._v(" "),a("li",[a("p",[t._v("Use "),a("code",[t._v("git status")]),t._v(" gives information on the current status of a git repository and its contents")])]),t._v(" "),a("li",[a("p",[t._v("It's very useful, but at the moment we don't actually have any repos to check the status of!")])]),t._v(" "),a("li",[a("p",[t._v("We use the "),a("code",[t._v("git commit")]),t._v(" command to actually commit changes from the staging area.")])])]),t._v(" "),a("p",[t._v("When making a commit, we need to provide a commit message that summarizes the changes and work snapshotted in the commit")]),t._v(" "),a("p",[t._v("Running git commit will commit all staged changes. It also opens up a text editor and prompts you for a commit message.")]),t._v(" "),a("p",[t._v("This can be overwhelming when you're starting out, so instead you can use...")]),t._v(" "),a("p",[a("code",[t._v('git commit -m "my message"')]),t._v(" The -m flag allows us to pass in an inline commit message, rather than launching a text editor.")]),t._v(" "),a("p",[t._v("We'll learn more about writing good commit messages later on.")]),t._v(" "),a("p",[a("code",[t._v("git log")]),t._v(" get all commit list")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://git-scm.com/docs/git-config",target:"_blank",rel:"noopener noreferrer"}},[t._v("book git"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("code",[t._v("rm -rf .git")]),t._v(" remove git from project")]),t._v(" "),a("p",[a("code",[t._v("git diff")])]),t._v(" "),a("p",[a("code",[t._v("git diff --staged")]),t._v(" or "),a("code",[t._v("--cached")]),t._v(" will list the changes between the staging area and our last commit.")]),t._v(" "),a("p",[t._v('"Show me what will be included in my commit')]),t._v(" "),a("p",[t._v('if I run git commit right now"')]),t._v(" "),a("p",[a("code",[t._v("git diff HEAD [filename]")]),t._v(" "),a("code",[t._v("git diff --staged [filename]")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Set user name and email")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"rohan dhiman"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.email rohandhiman222@gmail.com\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set default editor")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" core.editor "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"code --wait"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# open editor setting")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set for setting space")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" core.autocrlf input "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("linux"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" core.autocrlf "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# list config setting")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--list")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# update url")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url origin https://rohandhiman222:password@github.com/rohandhiman222/devcode.git\n\n\ngedit ~/.zshrc\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ZSH_THEME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"agnoster"')]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove url")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" origin\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check all url")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# install package good look terminal")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("zsh")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" file1.txt\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove file forece")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-rf")]),t._v(" .git\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove only txt file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# append text in file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" world "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" file1.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# open editor")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add and commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-am")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"both comment"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git rm, mv all command mean remove from directory and staging area don't need to add only commit")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# list all files")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" ls-files\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" files1.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove all file txt")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" *.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rename file name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" file1.txt main.js\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rename file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" main.js file1.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create file add text")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" logs/ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" .gitignore\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if you want .ignore file but you mistake by add and commet so in this case we want remove from git not in directory use this command")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--cached")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" bin/ "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# bin is folder name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"removed directory by mistake added"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -s small view m mean modify a mean added ?? mean unstage")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# without stage area mean without add . command")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# track changes mean add . command runned")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--staged")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# visual diff")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" diff.tool vscode\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config difftool.vscode.cmd "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"code --wait --diff '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$LOCAL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$REMOTE")]),t._v('"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add $LOCAL $REMOTE inside")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("diff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    tool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vscode\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("difftool "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"vscode"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    cmd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"code --wait --diff '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$LOCAL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$REMOTE")]),t._v('"')]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# history")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--reverse")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# show/check changes by comment id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show 4e536b3\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Show/check changes latest comment")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show HEAD\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#Show/check old command second")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show HEAD~\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Show/check old commad by number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show HEAD~2\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Show/check old commad by filename or folder name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show HEAD~1:.gitignore\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Tree see by file and directory get commend id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" ls-tree HEAD~1\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# undu all file work")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# single file undu")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore filename\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# all file undo")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git added file reset single file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--staged")]),t._v(" file1.txt\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git added file reset all file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--staged")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git remove new file added mean -f file d mean directory")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-fd")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# removed file from comment by id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--source")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("HEAD~1 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check all file changes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--stat")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check all file changes with one line")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--stat")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check all text changes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--patch")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check all text changes with one line")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--patch")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# filter last 3 lines")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# filter author")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--author")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Mosh"')]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# filter date")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--after")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-08-17"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--before")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2020-08-17"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--after")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yesterday"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--after")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"one week ago"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--grep")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"GUI"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# file name filter")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" -S"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OBJECTIVES"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" -S"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"OBJECTIVES"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--patch")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# how many time this file changes")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" toc.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# view code also file change how many")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--patch")]),t._v(" toc.txt\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%an commited"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%an commited %h"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%an commited %H"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%an commited %h on %cd"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format:"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%Cgreen%an%Creset commited %h on %cd"')]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create alias")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" alias.lg "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"log --pretty=format:'%an committed %h'\"")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (git lg)")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--golbal")]),t._v(" alias.unstage "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"restore --staged ."')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show HEAD~2\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show HEAD~2:sections/creating-snapshots/staging-change.txt\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show HEAD~2 --name-only\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show HEAD~2 --name-status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# view two commants what is changed")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" HEAD~2 HEAD\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" HEAD~2 HEAD audience.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" HEAD~2 HEAD --name-only\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" HEAD~2 HEAD --name-status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# checkout comment after that only see not in master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout commentid\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--onelines")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# all people comment count")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" shortlog\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# shorted history")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" shortlog "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# name and total count comment")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" shortlog "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get email address also author")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" shortlog "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" shortlog "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--after")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"date"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# file by file comments all")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log toc.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" toc.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--stat")]),t._v(" toc.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--patch")]),t._v(" toc.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete file restore")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" -- toc.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout a642e12 toc.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"restore"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" blame "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" audience.txt\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# three line")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" blame "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-L")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,3")]),t._v(" audience.txt\n\n\n\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch feature\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# list branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#chenage branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch feature\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# change branch name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" oldname newname/sign-up-form\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check master branch through all commented")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete branch you can't delete if not merged with master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" feature\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# force delete branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-D")]),t._v(" feature\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check all commit through master and not master only feature branch")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("feature\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check master to feature changes u are inside master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" feature\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --name-status feature\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check changes another branch like master to feature")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("feature\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#/////////////////////////////////#")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stash mean u r working master imeditaltly u have to create branch but u can't create branch because ur work don't yet in this case how can we create branch we use stash and stash store it safe place")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# only changes put in file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash push "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new task rules."')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# add also file in stash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash push "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-am")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"new file also added"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stash list")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash list\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check stash changes show both commad same")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash show "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash show stash@"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# apply changes in branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash apply "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove stash")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash drop "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git stash remove all")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git merge fast-forward mean if not changed anything in master it will merge easily")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge feature\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create and switch branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-C")]),t._v(" feature\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# after finish merge no fast-forward commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge --no-ff feature\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--all")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--graph")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# disable fast-forward only currrent repos")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config ff no\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# disalbe fast-forward for all")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" ff no\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# feature and master both work branch that caase not fast-forward")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# list of merged branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--merged")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# list not merge branch")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --no-merged\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# merge confict one file added and second branch delete confict")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# same file added twist into content is diff")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# only print master code if you use --abort")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--abort")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# reseting  header=> soft, mixed, hard")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v(" HEAD~1\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# revert commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" HEAD\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# squash merge mean u will get in master every thing you can modify and fix good problem 2 first not showed in merged history and we have to remove force after merge its importatnt remove")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--squash")]),t._v(" features\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rebase mean get master code in your branch use this command")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--continue")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--skip")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--abort")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clean "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-fd")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" mergetool.keepBackup "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# merge commad without merge command commidid u want merge")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick commitid\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get single file from another branch without merge")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# feature branch take file")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# we are inside master branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--source")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("feature -- toc.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# download master code to local")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch origin branchname\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git fetch mean origin master download")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-all")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--graph")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-vv")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge orgin/master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-vv")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# pull = fetch + merge")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -rebase mean linear log commit")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-rebase")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push master\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# by default your branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tags")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag v1.0\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin v1.0\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--delete")]),t._v(" v1.0\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" v1.0\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# push branch orgin")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" origin feature\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#check branch connected")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-vv")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check origin branch list")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove origin branch live")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" origin feature\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remove local select first master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" feature\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get all branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# not get origin branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# got here orign branch")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" switch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-C")]),t._v(" feature origin/feature\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tracking remove")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote prune origin\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# restore deleted file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# toc.txt file remove get commit id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" -- toc.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout f1d0ddd toc.txt\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"restore file"')]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tagging first versoin second commitid")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# by default message of commit tag label will be")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag v1.0 28b2203\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check log")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# all tags list")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# checkout same commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout v1.0\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# different type of tag")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-a")]),t._v(" v1.1 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My versioin 1.1"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# tag list by message")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete tag")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" tag "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v(" v1.1\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Soft only remove commit all get u will in stage area only remove commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# multpleple comment convert into one if increate head value")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--soft")]),t._v(" HEAD~1\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# check stage area changes")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--cached")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--graph")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# after git reset --soft => after work --mixed command")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git reset --mixed HEAD> git reset HEAD => by default this command both are same")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --mixed commit convert back to unstage area u can modify data")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# both are command same")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--mixed")]),t._v(" HEAD\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --hard mean remove data u added in file")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# commit also remove")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v(" HEAD\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git commit --amend")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# amend use rename commit or forget other file to add that we can use only first commit edit")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# first put file stage after that use --amend command")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--amend")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"six mored updated"')]),t._v("\n\n\n\n\n")])])]),a("h2",{attrs:{id:"version-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#version-control"}},[t._v("#")]),t._v(" Version Control")]),t._v(" "),a("p",[t._v("Version control is software that tracks and manages changes to files over time.")]),t._v(" "),a("p",[t._v("Version control systems generally allow users to revisit earlier versions of the files, compare changes between versions, undo changes, and al whole lot more.")]),t._v(" "),a("p",[t._v("Git helps us..")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Track changes across multiple files")])]),t._v(" "),a("li",[a("p",[t._v("Compare versions of a project\nTime Travel back to old versions")])]),t._v(" "),a("li",[a("p",[t._v("Revert to a previous version")])]),t._v(" "),a("li",[a("p",[t._v("Collaborate and share changes")])]),t._v(" "),a("li",[a("p",[t._v("Combine changes")])])]),t._v(" "),a("h2",{attrs:{id:"repository"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[t._v("#")]),t._v(" Repository")]),t._v(" "),a("p",[t._v('A Git "Repo" is a workspace which tracks and manages files within a folder.')]),t._v(" "),a("h2",{attrs:{id:"committing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#committing"}},[t._v("#")]),t._v(" Committing")]),t._v(" "),a("p",[t._v("Making a commit is similar to making a save in a video game. We're taking a snapshot of a git repository in time.")]),t._v(" "),a("p",[t._v("When saving a file, we are saving the state of a single file. With Git, we can save the state of multiple files and folders together.")]),t._v(" "),a("p",[a("code",[t._v("git status")]),t._v(" gives information on the current status of a git repository and its contents")]),t._v(" "),a("h2",{attrs:{id:"adding"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adding"}},[t._v("#")]),t._v(" Adding")]),t._v(" "),a("p",[t._v("We use the git add command to stage changes to be committed.")]),t._v(" "),a("p",[t._v('It\'s a way of telling Git, "please include this change in our next commit"')]),t._v(" "),a("p",[t._v("Use git add to add specific files to the staging area. Separate files with spaces to add multiple at once.")]),t._v(" "),a("p",[a("code",[t._v("git add file1 file2")])]),t._v(" "),a("p",[t._v("Use git add . to stage all changes at once")]),t._v(" "),a("p",[a("code",[t._v("git add .")])]),t._v(" "),a("h2",{attrs:{id:"git-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" Git Commit")]),t._v(" "),a("p",[t._v("We use the git commit command to actually commit changes from the staging area.")]),t._v(" "),a("p",[t._v("When making a commit, we need to provide a commit message that summarizes the changes and work snapshotted in the commit")]),t._v(" "),a("p",[t._v("Running git commit will commit all staged changes. It also opens up a text editor and prompts you for a commit message.")]),t._v(" "),a("p",[t._v("This can be overwhelming when you're starting out, so instead you can use...")]),t._v(" "),a("p",[t._v("git commit")]),t._v(" "),a("p",[t._v("The -m flag allows us to pass in an inline commit message, rather than launching a text editor.")]),t._v(" "),a("p",[t._v("We'll learn more about writing good commit messages later on.")]),t._v(" "),a("p",[t._v('git commit -m "my message"')]),t._v(" "),a("h2",{attrs:{id:"amending-commits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#amending-commits"}},[t._v("#")]),t._v(" Amending Commits")]),t._v(" "),a("p",[t._v("Suppose you just made a commit and then realized you forgot to include a file! Or, maybe you made a typo in the commit message that you want to correct.")]),t._v(" "),a("p",[t._v('Rather than making a brand new separate commit, you can "redo" the previous commit using')]),t._v(" "),a("p",[t._v("the --amend option")]),t._v(" "),a("div",{staticClass:"language-git extra-class"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# only change latest commit mean only change log name of commit")]),t._v("\n\ngit commit --amend -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my old command convert into new commit"')]),t._v("\n")])])]),a("h2",{attrs:{id:"ignoring-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignoring-files"}},[t._v("#")]),t._v(" Ignoring Files")]),t._v(" "),a("p",[t._v("We can tell Git which files and directories to ignore in a given repository, using a .gitignore file.")]),t._v(" "),a("p",[t._v("This is useful for files you know you NEVER want to commit, including:")]),t._v(" "),a("p",[t._v("Secrets, API keys, credentials, etc.")]),t._v(" "),a("p",[t._v("Operating System files (.DS_Store on Mac)")]),t._v(" "),a("p",[t._v("Log files")]),t._v(" "),a("p",[t._v("Dependencies & packages")]),t._v(" "),a("p",[t._v(".gitignore")]),t._v(" "),a("p",[t._v("Create a file called .gitignore in the root of a repository. Inside the file, we can write patterns to tell Git which files & folders to ignore:")]),t._v(" "),a("p",[t._v(".DS_Store will ignore files named .DS_Store")]),t._v(" "),a("p",[t._v("folderName/ will ignore an entire directory")]),t._v(" "),a("p",[t._v("*.log will ignore any files with the .log extension")]),t._v(" "),a("h2",{attrs:{id:"git-branching"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-branching"}},[t._v("#")]),t._v(" Git Branching")]),t._v(" "),a("p",[t._v("Branches are an essential part of Git!")]),t._v(" "),a("p",[t._v("Think of branches as alternative timelines for a project.")]),t._v(" "),a("p",[t._v("They enable us to create separate contexts where we can try new things, or even work on multiple ideas in parallel.")]),t._v(" "),a("p",[t._v("If we make changes on one branch, they do not impact the other branches (unless we merge the changes)")]),t._v(" "),a("h1",{attrs:{id:"master"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master"}},[t._v("#")]),t._v(" Master")]),t._v(" "),a("p",[t._v('Many people designate the master branch as their "source of truth" or the "official branch" for their codebase, but that is left to you to decide.')]),t._v(" "),a("p",[t._v('From Git\'s perspective, the master branch is just like any other branch. It does not have to hold the "master copy" of your project.')]),t._v(" "),a("p",[t._v("Master?")]),t._v(" "),a("p",[t._v("Main?")]),t._v(" "),a("p",[t._v("In 2020, Github renamed the default branch")]),t._v(" "),a("p",[t._v("from master to main. The default Git branch name is still master, though the Git team is exploring a potential change.")]),t._v(" "),a("p",[t._v("We will circle back to this shortly")]),t._v(" "),a("h1",{attrs:{id:"head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" HEAD")]),t._v(" "),a("p",[t._v("We'll often come across the term HEAD in Git.")]),t._v(" "),a("p",[t._v('HEAD is simply a pointer that refers to the current "location" in your repository. It points to a particular branch reference.')]),t._v(" "),a("p",[t._v("So far, HEAD always points to the latest commit you made on the master branch, but soon we'll see that we can move around and HEAD will change!")]),t._v(" "),a("p",[t._v("Viewing Branches")]),t._v(" "),a("p",[t._v("Use "),a("code",[t._v("git branch")]),t._v(" to view your existing branches. The default branch in every git repo is master, though you can configure this.")]),t._v(" "),a("p",[t._v("Look for the * which indicates the branch you are currently on.")]),t._v(" "),a("p",[t._v("Creating Branches")]),t._v(" "),a("p",[t._v("Use "),a("code",[t._v("git branch <branch-name>")]),t._v(" to make a new branch based upon the current HEAD")]),t._v(" "),a("p",[t._v("This just creates the branch. It does not switch you to that branch (the HEAD stays the same)")]),t._v(" "),a("p",[t._v("Switching Branches")]),t._v(" "),a("p",[t._v("Once you have created a new branch,")]),t._v(" "),a("p",[t._v("use "),a("code",[t._v("git switch <branch-name>")]),t._v(" to switch to it.")]),t._v(" "),a("p",[t._v("Another way of switching??")]),t._v(" "),a("p",[t._v("Historically, we used "),a("code",[t._v("git checkout <branch-name>")]),t._v(" to switch branches. This still works.")]),t._v(" "),a("p",[t._v("The checkout command does a million additional things, so the decision was made to add a standalone switch command which is much simpler.")]),t._v(" "),a("p",[t._v("You will see older tutorials and docs using checkout rather than switch. Both now work.")]),t._v(" "),a("p",[t._v("Creating & Switching")]),t._v(" "),a("p",[t._v("Use git switch with the -c flag to create a new branch AND switch to it all in one go.")]),t._v(" "),a("p",[t._v('Remember -c as short for "create"')]),t._v(" "),a("p",[a("code",[t._v("git switch -c refactor")]),t._v(" create and switch branch")]),t._v(" "),a("p",[t._v("the -c flag makes the new refactor branch and switches to it all at once!")]),t._v(" "),a("p",[t._v("Viewing")]),t._v(" "),a("p",[t._v("More Info")]),t._v(" "),a("p",[t._v("Use the -v flag with git branch to view more information about each branch.")]),t._v(" "),a("p",[a("code",[t._v("git swith dev")]),t._v("\ncat .git/HEAD # get same dev ref")]),t._v(" "),a("h2",{attrs:{id:"merging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merging"}},[t._v("#")]),t._v(" Merging")]),t._v(" "),a("p",[t._v("Branching makes it super easy to work within self-contained contexts, but often we want to incorporate changes from one branch into another!")]),t._v(" "),a("p",[t._v("We can do this using the git merge command")]),t._v(" "),a("p",[t._v("The merge command can sometimes confuse students early on. Remember these two merging concepts:")]),t._v(" "),a("p",[t._v("We merge branches, not specific commits")]),t._v(" "),a("p",[t._v("We always merge to the current HEAD branch")])])}),[],!1,null,null,null);a.default=s.exports}}]);